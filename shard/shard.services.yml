services:
  #Register Symfony's event dispatcher. Easier to use it with objects that
  #want to watch for events, than to use Drupal's container-aware plugin,
  #that works better with classes that need to be instantiated automatically.
  shard.event_dispatcher:
    class: Symfony\Component\EventDispatcher\EventDispatcher
  shard.metadata:
    class: Drupal\shard\ShardMetadata
    arguments: ['@entity_display.repository', '@entity.query', '@entity_type.bundle.info', '@config.factory', '@entity_field.manager', '@event_dispatcher']
  shard.dom_processor:
    class: Drupal\shard\ShardDomProcessor
    arguments: ['@shard.metadata']
  shard.utilities:
    class: Drupal\shard\ShardUtilities
  shard.tag_handler:
    class: Drupal\shard\ShardTagHandler
    arguments: ['@shard.metadata', '@shard.dom_processor', '@entity_type.manager', '@entity_display.repository', '@entity.query', '@renderer', '@database', '@event_dispatcher', '@uuid']
  shard.tag_model:
    class: Drupal\shard\ShardTagModel
    arguments: ['@database', '@shard.metadata', '@entity_type.manager', '@renderer', '@shard.dom_processor']
    #Create a new instance every time the service is called.
    scope: prototype
