<?php

/**
 * @file
 * Contains shard.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
//use Drupal\Core\Entity\EntityInterface;
//use Drupal\Component\Utility\Html;
//use Drupal\shard\ShardTagHandler;
//use Drupal\views\ViewExecutable;
use Drupal\node\NodeInterface;
/**
 * Implements hook_help().
 * @param $route_name
 * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
 * @return string
 */
function shard_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the shard module.
    case 'help.page.shard':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Testing the shard idea with shards.') . '</p>';
      return $output;

    default:
  }
  //Should not get to here.
  return t('Helpless');
}


/**
 * Implements hook_form_alter().
 *
 * Convert DB tag format to CKEditor tag format.
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $formState
 * @param $form_id
 */
function shard_form_alter(&$form, FormStateInterface $formState, $form_id) {
  //Is this a form for an entity?
  if ( method_exists($formState->getFormObject(), 'getEntity') ) {
    //Aye.
    //Get some services.
    /* @var \Drupal\shard\ShardMetadataInterface $metadata */
    $metadata = \Drupal::service('shard.metadata');
    //Get the fields that are eligible to be sharded.
    $eligibleFieldsForNode = $metadata->listEligibleFieldsForNode(
      $formState->getFormObject()->getEntity()
    );
    //What eligible fields are on the form?
    $eligibleFieldsOnForm = [];
    foreach( $eligibleFieldsForNode as $eligibleFieldName ) {
      if ( isset( $form[$eligibleFieldName] ) ) {
        $eligibleFieldsOnForm[] = $eligibleFieldName;
      }
    }
    //Are there any eligible fields on the form?
    if ( sizeof($eligibleFieldsOnForm) > 0 ) {
      //Attach JS setting to show that this field is eligible.
      $form['#attached']['drupalSettings']['shard']['eligibleField']
        = $eligibleFieldsOnForm;
      //Convert the shard tags from DB format to CK format.
      $container = \Drupal::getContainer();
      $shardTagHandler = $container->get('shard.tag_handler');
//      $shardTagHandler = new ShardTagHandler(
//        $container->get('shard.metadata'),
//        $container->get('shard.dom_processor'),
//        $container->get('entity_type.manager'),
//        $container->get('entity_display.repository'),
//        $container->get('entity.query'),
//        $container->get('renderer'),
//        $container->get('database'),
//        $container->get('event_dispatcher')
//      );
      //For each field...
      foreach( $eligibleFieldsOnForm as $fieldName ) {
        //For each instance...
        foreach($form[$fieldName]['widget'] as $instanceIndex => $instanceData) {
          //There are many keys, not just instance indexes. Just do the numeric ones.
          if ( is_numeric($instanceIndex) ) {
            //Is this a formatted text field?
            if ( $instanceData['#type'] == 'text_format' ) {
              //Is there default data?
              if (isset($instanceData['#default_value']) && $instanceData['#default_value'] ) {
                //Convert it.
                $dbHtml = $instanceData['#default_value'];
                $ckHtml = $shardTagHandler->dbHtmlToCkHtml($dbHtml);
                $form[$fieldName]['widget'][$instanceIndex]['#default_value'] = $ckHtml;
              }
              //Is there a summary field?
              if ( isset($instanceData['summary']['#default_value'])
                    && $instanceData['summary']['#default_value'] ) {
                //Convert it.
                $dbHtml = $instanceData['summary']['#default_value'];
                $ckHtml = $shardTagHandler->dbHtmlToCkHtml($dbHtml);
                $form[$fieldName]['widget'][$instanceIndex]['summary']['#default_value'] = $ckHtml;

              }
            } //End the field is text_format type.
          } //It's a field instance (numeric key).
        } //End foreach widget.
      } //End foreach eligible field on the form.
    } //End if there are eligible fields.
  } //End this is an entity form.
}


//  if ( ! \Drupal::currentUser()->hasPermission('edit shard shard field manually') ) {
//    $form['field_shard']['#type'] = 'hidden';
//  }
//  else {
//Is this a form for entities?

//  if ( isset($form['#entity_builders']) ) {
//    $form['actions']['submit']['#submit'][] = 'shard_replace_tags_in_form_fields';
//    $form['actions']['preview']['#submit'][] = 'shard_replace_tags_in_form_fields';
//    $form['actions']['publish']['#submit'][] = 'shard_replace_tags_in_form_fields';
//    $form['actions']['unpublish']['#submit'][] = 'shard_replace_tags_in_form_fields';
//    $form['actions']['delete']['#submit'][] = 'shard_remove_shards_on_delete';
//  }

//  $form_state->getFormObject()->getEntity()
//  }


//function shard_entity_view_alter(array &$build,
//                               \Drupal\Core\Entity\EntityInterface $entity,
//                               \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
//
//  $container = \Drupal::getContainer();
//  $shard_tag_handler = new ShardTagHandler(
////    \Drupal::service('shard.eligible_fields'),
//    $container->get('entity_type.manager'),
//    $container->get('entity_display.repository'),
//    $container->get('entity.query'),
//    $container->get('renderer')
//  );
//  $r=89;
////  $shard_tag_handler->dbTagsToViewTags($build, $entity);
//}



function shard_replace_tags_in_form_fields($form, &$form_state) {
  $container = \Drupal::getContainer();
  $shardTagHandler = $container->get('shard.tag_handler');
//  $shard_tag_handler = new ShardTagHandler(
//    $container->get('shard.metadata'),
//    $container->get('shard.dom_processor'),
//    $container->get('entity_type.manager'),
//    $container->get('entity_display.repository'),
//    $container->get('entity.query'),
//    $container->get('renderer'),
//    $container->get('database'),
//    $container->get('event_dispatcher')
//  );
  $shardTagHandler->entityCkTagsToDbTags($form_state);
}

function shard_remove_shards_on_delete($form, &$form_state) {
  drupal_set_message('delete');
}

/**
 * Implements hook_node_presave().
 *
 * This is called when saving an updated node, or creating a new one.
 * Creating a node is tricky, since the nid for the host node is
 * not known, so creating all the shard collection item entities has to
 * be delayed until after the nid is known. The node's fields have
 * to be reprocessed, so that the nids
 *
 * @param NodeInterface $node
 */
function shard_node_presave(NodeInterface $node) {
  $container = \Drupal::getContainer();
  /* @var \Drupal\shard\ShardMetadataInterface $metadata */
  $metadata = $container->get('shard.metadata');
  //Get the fields that are eligible to be sharded.
  $eligibleFieldsForNode = $metadata->listEligibleFieldsForNode($node);
  //What eligible fields are on the form?
  $eligibleFieldsOnForm = [];
  $r=5;
  return;
  foreach( $eligibleFieldsForNode as $eligibleFieldName ) {
    if ( isset( $form[$eligibleFieldName] ) ) {
      $eligibleFieldsOnForm[] = $eligibleFieldName;
    }
  }


  $container = \Drupal::getContainer();
  $shardTagHandler = $container->get('shard.tag_handler');
//  $shard_tag_handler = new ShardTagHandler(
//    $container->get('shard.metadata'),
//    $container->get('shard.dom_processor'),
//    $container->get('entity_type.manager'),
//    $container->get('entity_display.repository'),
//    $container->get('entity.query'),
//    $container->get('renderer'),
//    $container->get('database'),
//    $container->get('event_dispatcher')
//  );
  $shardTagHandler->entityCkTagsToDbTags($node);
}


function shard_node_insert(Drupal\Core\Entity\EntityInterface $entity) {
  if ( isset($_REQUEST['temp_nid']) ) {
    $container = \Drupal::getContainer();
    $shardTagHandler = $container->get('shard.tag_handler');
//    $shard_tag_handler = new ShardTagHandler(
//      $container->get('shard.metadata'),
//      $container->get('shard.dom_processor'),
//      $container->get('entity_type.manager'),
//      $container->get('entity_display.repository'),
//      $container->get('entity.query'),
//      $container->get('renderer'),
//      $container->get('database'),
//      $container->get('event_dispatcher')
//    );
    $shardTagHandler->replaceTempNid($entity);
  }
}


