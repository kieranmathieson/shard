<?php

/**
 * @file
 * Contains shard.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
//use Drupal\Core\Entity\EntityInterface;
//use Drupal\Component\Utility\Html;
//use Drupal\shard\ShardTagHandler;
//use Drupal\views\ViewExecutable;
//use Drupal\node\NodeInterface;

use Drupal\Core\Url;
use Drupal\shard\ShardDataRepository;
use Drupal\shard\ShardMetadata;
use Drupal\shard\Exceptions\ShardException;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_help().
 * @param $route_name
 * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
 * @return string|void
 */
function shard_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the shard module.
    case 'help.page.shard':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Testing the shard idea with shards.') . '</p>';
      return $output;

    default:
  }
}


/**
 * Implements hook_form_alter().
 *
 * Convert DB tag format to CKEditor tag format.
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $formState
 * @param $form_id
 */
function shard_form_alter(&$form, FormStateInterface $formState, $form_id) {
  //Is this a form for an entity?
  if ( method_exists($formState->getFormObject(), 'getEntity') ) {
    //Aye.
    //Can the user mess with shards?
    if ( ! \Drupal::currentUser()->hasPermission('insert shards') ) {
      return;
    }
    /* @var \Drupal\shard\ShardMetadataInterface $metadata */
    $metadata = \Drupal::service('shard.metadata');
    //Get the fields that are eligible to be sharded.
    $eligibleFieldsForNode = $metadata->listEligibleFieldsForNode(
      $formState->getFormObject()->getEntity()
    );
    //What eligible fields are on the form?
    $eligibleFieldsOnForm = [];
    foreach( $eligibleFieldsForNode as $eligibleFieldName ) {
      if ( isset( $form[$eligibleFieldName] ) ) {
        $eligibleFieldsOnForm[] = $eligibleFieldName;
      }
    }
    //Are there any eligible fields on the form?
    if ( sizeof($eligibleFieldsOnForm) > 0 ) {
      //Attach JS setting to show that this field is eligible.
      $form['#attached']['drupalSettings']['shard']['eligibleField']
        = $eligibleFieldsOnForm;
      //Convert the shard tags from DB format to CK format.
      $container = \Drupal::getContainer();
      $shardTagHandler = $container->get('shard.tag_handler');
      //For each field...
      foreach( $eligibleFieldsOnForm as $fieldName ) {
        //For each instance...
        foreach($form[$fieldName]['widget'] as $instanceIndex => $instanceData) {
          //There are many keys, not just instance indexes. Just do the numeric ones.
          if ( is_numeric($instanceIndex) ) {
            //Is this a formatted text field?
            if ( $instanceData['#type'] == 'text_format' ) {
              //Is there default data?
              if (isset($instanceData['#default_value']) && $instanceData['#default_value'] ) {
                //Convert it.
                $dbHtml = $instanceData['#default_value'];
                $ckHtml = $shardTagHandler->dbHtmlToCkHtml($dbHtml);
                $form[$fieldName]['widget'][$instanceIndex]['#default_value'] = $ckHtml;
              }
              //Is there a summary field?
              if ( isset($instanceData['summary']['#default_value'])
                    && $instanceData['summary']['#default_value'] ) {
                //Convert it.
                $dbHtml = $instanceData['summary']['#default_value'];
                $ckHtml = $shardTagHandler->dbHtmlToCkHtml($dbHtml);
                $form[$fieldName]['widget'][$instanceIndex]['summary']['#default_value'] = $ckHtml;

              }
            } //End the field is text_format type.
          } //It's a field instance (numeric key).
        } //End foreach widget.
      } //End foreach eligible field on the form.
//      $submitHandler = '_shard_node_edit_submit_handler';
//      $form['actions']['submit']['#submit'][] = $submitHandler;
//      $form['actions']['publish']['#submit'][] = $submitHandler;
//      $form['actions']['unpublish']['#submit'][] = $submitHandler;
      $form['#validate'][] = '_shard_node_validate_handler';
    } //End if there are eligible fields.
  } //End this is an entity form.
}


/**
 * Runs after a node with eligible shard fields is submitted.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
//function _shard_node_edit_submit_handler($form, FormStateInterface $form_state) {
//  //If this is called during testing, skip it.
//  if ( array_key_exists('simpletest.settings', $GLOBALS['conf']) ) {
//    return;
//  }
//  /* @var \Drupal\shard\ShardDataRepository $shardDataRepo  */
//  global $shardDataRepo;
//  $shardDataRepo = NULL;
//  $container = \Drupal::getContainer();
//  $shardTagHandler = $container->get('shard.tag_handler');
//  $shardDataRepo = $shardTagHandler->formCkTagsToDbTags($form_state);
//
//}


/**
 * Convert shard tags from their CKEditor version to their DB storage
 * version for all eligible fields in $entity. Called by a hook in
 * the .module file. Return data to be used by later hooks.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $formState
 */
function _shard_node_validate_handler($form, FormStateInterface $formState) {
  //If this is called during testing, skip it.
  if ( array_key_exists('simpletest.settings', $GLOBALS['conf']) ) {
    return;
  }
  //Can the user mess with shards?
  if ( ! \Drupal::currentUser()->hasPermission('insert shards') ) {
    return;
  }
  $newShardCollectionItems = [];
  $oldShardIds = [];
  /* @var \Drupal\node\NodeForm $nodeForm */
  $nodeForm = $formState->getFormObject();
  /* @var \Drupal\node\NodeInterface $hostNode */
  $hostNode = $nodeForm->getEntity();
  $isNewNode = $hostNode->isNew();
  if ( $isNewNode ) {
    //Use a temporary fake nid. It will be replaced when the real nid is
    //available.
    $hostNid = \Drupal::service('uuid')->generate();
  }
  else {
    //This is an existing node, with an nid.
    //Get the nid of the node containing the references.
    $hostNid = $hostNode->id();
    //Get the ids of shard collection items that refer to the host node.
    //They'll be erased later.
    $oldShardIds = shard_get_shard_item_ids_for_host_node($hostNid);
  }
  //Get the names of the fields that are eligible for shards.
  /* @var ShardMetadata $metadata */
  $metadata = \Drupal::service('shard.metadata');
  $eligibleFields = $metadata->listEligibleFieldsForNode($hostNode);
  /* @var \Drupal\shard\ShardTagHandler $tagHandler */
  $tagHandler = \Drupal::service('shard.tag_handler');
  //No shard tags processed yet.
  $numTagsProcessed = 0;
  foreach($eligibleFields as $fieldName) {
    try {
      $fieldValues = $formState->getValue($fieldName);
      //Does the field exist on the form?
      if ( $fieldValues ) {
        //Loop over each value for this field (could be multivalued).
        for ($delta = 0; $delta < sizeof($fieldValues); $delta++) {
          //Translate the HTML.
          //This will also update the field collection in the shards' nodes
          //to show the shards' insertion into the host nodes.
          //For existing host nodes, the data will be saved during
          //this process.
          //For new nodes, the data on field collections will be stored,
          //and used later once the nid of the host is known. That data
          //is stored in $newShardCollectionItems.
          $fieldValues[$delta]['value'] = $tagHandler->ckHtmlToDbHtml(
            $fieldValues[$delta]['value'], //The HTML to process.
            $newShardCollectionItems, //Shard collection item data.
            $hostNid,
            $fieldName,
            $delta,
            $numTagsProcessed
          );
        } //End foreach value of the field
        //Store the changed data.
        $formState->setValue($fieldName, $fieldValues);
      }
    } catch (ShardException $e) {
      $message = t(
          'Problem detected during shard processing for the field %field. '
          . 'It has been recorded in the log. Deets:', ['%field' => $fieldName])
        . '<br><br>' . $e->getMessage();
      drupal_set_message($message, 'error');
      \Drupal::logger('shards')->error($message);
    }
  } // End for each eligible field.
  if ( $isNewNode && $numTagsProcessed > 0 ) {
    //Create holder for the collected data. Passed back to module,
    //which uses it in later processing.
    $shardDataRepo = new ShardDataRepository();
    //Fill it.
    $shardDataRepo
      ->setNewShardCollectionItems($newShardCollectionItems)
      ->setHostPlaceholderNid($hostNid);
    //Save it.
    $metadata->stashStringInConFig(
      ShardMetadata::SHARD_NODE_SAVE_DATA_REPO, $shardDataRepo->serialize());
//    $formState->setRedirect('shard.process_saved_nodes');
    $x = Url::fromRoute('shard.process_saved_nodes');
    $url = $x->toString();
    $response = new RedirectResponse($url);
    $response->send();
  }
  else {
    //Edited existing node.
    shard_erase_old_shards($oldShardIds);
  }
}

/**
 * Get the ids of the shard collection items that refer to a host nid.
 *
 * @param int $hostNid Host nid to look for.
 * @return int[] Ids.
 */
function shard_get_shard_item_ids_for_host_node($hostNid){
  /* @var \Drupal\Core\Entity\Query\QueryFactory */
  $queryService = \Drupal::service('entity.query');
  $query = $queryService->get('field_collection_item')
    ->condition('field_host_node', $hostNid);
  $result = $query->execute();
  return $result;
}


function shard_erase_old_shards($oldShardIds) {
  //Erase old shards.
  $itemsToDelete = \Drupal::service('entity_type.manager')->
    getStorage('field_collection_item')->loadMultiple($oldShardIds);
  foreach ($itemsToDelete as $item) {
    $item->delete();
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 * @param \Drupal\node\NodeInterface $node
 */
function shard_node_insert(Drupal\node\NodeInterface $node) {
  //At this point, the node's nid is known. Add it to the
  //data used to create shard collection items after a
  //redirect.
  /* @var ShardMetadata $metadata */
  $metadata = \Drupal::service('shard.metadata');
  if ( $metadata->nodeHasEligibleFields($node) ) {
    //Load the existing data set.
    /* @var \Drupal\shard\ShardDataRepository $dataRepo */
    $dataRepo = new ShardDataRepository();
    $dataRepo->unserialize(
      $metadata->fetchStringFromConfig(
        ShardMetadata::SHARD_NODE_SAVE_DATA_REPO
      )
    );
    //Add the id.
    $dataRepo->setActualHostNid($node->id());
    //Save.
    $metadata->stashStringInConFig(
      ShardMetadata::SHARD_NODE_SAVE_DATA_REPO,
      $dataRepo->serialize()
    );
  }

}





