<?php

/**
 * @file
 * Contains sloth.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
//use Drupal\Core\Entity\EntityInterface;
//use Drupal\Component\Utility\Html;
use Drupal\shard\ShardTagHandler;

//use Drupal\views\ViewExecutable;
use Drupal\sloth\Services\EligibleFields;

/**
 * Implements hook_help().
 * @param $route_name
 * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
 * @return string
 */
function sloth_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the sloth module.
    case 'help.page.sloth':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Testing the shard idea with sloths.') . '</p>';
      return $output;

    default:
  }
}


/**
 * Implements hook_form_alter().
 */
//function sloth_form_alter(&$form, FormStateInterface $form_state, $form_id) {
//  //Is this a form for an entity?
//  if ( method_exists($form_state->getFormObject(), 'getEntity') ) {
//    //Aye.
//    //Get the fields that are eligible to be slothed.
//    /* @var \Drupal\shard\ShardMetadata $metadata  */
//    $metadata = \Drupal::service('shard.metadata');
//    $eligible_field_names = $metadata->listEligibleFieldsForNode(
//      $form_state->getFormObject()->getEntity()
//    );
//    //What eligible fields are on the form?
//    $eligible_fields_on_form = [];
//    foreach( $eligible_field_names as $eligible_field_name ) {
//      if ( isset( $form[$eligible_field_name] ) ) {
//        $eligible_fields_on_form[] = $eligible_field_name;
//      }
//    }
//    //Are there any eligible fields on the form?
//    if ( sizeof($eligible_fields_on_form) > 0 ) {
//      //Attach JS setting to show that this field is eligible.
//      $form['#attached']['drupalSettings']['sloth']['eligibleField']
//        = $eligible_fields_on_form;
//      //Convert the sloth tags from DB format to CK format.
//      $container = \Drupal::getContainer();
//      $shard_tag_handler = \Drupal::service('shard.tag_handler');
//      //For each field...
//      foreach( $eligible_fields_on_form as $field_name ) {
//        //For each instance...
//        foreach($form[$field_name]['widget'] as $instance_index=>$instance_data) {
//          //There are many keys, not just instance indexes. Just do the numeric ones.
//          if ( is_numeric($instance_index) ) {
//            //Is this a formatted text field?
//            if ( $instance_data['#type'] == 'text_format' ) {
//              //Is there default data?
//              if (isset($instance_data['#default_value']) && $instance_data['#default_value'] ) {
//                //Convert it.
//                $dbHtml = $instance_data['#default_value'];
//                $ck_html = $shard_tag_handler->dbHtmlToCkHtml($dbHtml);
//                $form[$field_name]['widget'][$instance_index]['#default_value'] = $ck_html;
//              }
//              //Is there a summary field?
//              if ( isset($instance_data['summary']['#default_value'])
//                    && $instance_data['summary']['#default_value'] ) {
//                //Convert it.
//                $dbHtml = $instance_data['summary']['#default_value'];
//                $ck_html = $shard_tag_handler->dbHtmlToCkHtml($dbHtml);
//                $form[$field_name]['widget'][$instance_index]['summary']['#default_value'] = $ck_html;
//
//              }
//            } //End the field is text_format type.
//          } //It's a field instance (numeric key).
//        } //End foreach widget.
//      } //End foreach eligible field on the form.
//    } //End if there are eligible fields.
//  } //End this is an entity form.
//}


//function sloth_replace_tags_in_form_fields($form, &$form_state) {
//  $container = \Drupal::getContainer();
//  $shard_tag_handler = new SlothTagHandler(
////    \Drupal::service('sloth.eligible_fields'),
//    $container->get('entity_type.manager'),
//    $container->get('entity_display.repository'),
//    $container->get('entity.query'),
//    $container->get('renderer'),
//    $container->get('database')
//  );
//  $shard_tag_handler->entityCkTagsToDbTags($form_state);
//}
//
//function sloth_remove_shards_on_delete($form, &$form_state) {
//  drupal_set_message('delete');
//}
//
//function sloth_node_presave(Drupal\Core\Entity\EntityInterface $entity) {
//  $container = \Drupal::getContainer();
//  $shard_tag_handler = new SlothTagHandler(
//    $container->get('entity_type.manager'),
//    $container->get('entity_display.repository'),
//    $container->get('entity.query'),
//    $container->get('renderer'),
//    $container->get('database')
//  );
//  $shard_tag_handler->entityCkTagsToDbTags($entity);
//}
//
//
//function sloth_node_insert(Drupal\Core\Entity\EntityInterface $entity) {
//  if ( isset($_REQUEST['temp_nid']) ) {
//    $container = \Drupal::getContainer();
//    $shard_tag_handler = new SlothTagHandler(
//      $container->get('entity_type.manager'),
//      $container->get('entity_display.repository'),
//      $container->get('entity.query'),
//      $container->get('renderer'),
//      $container->get('database')
//    );
//    $shard_tag_handler->replaceTempNid($entity);
//  }
//}


